/*
 * Metaculus API
 *
 * Welcome to the unofficial Rust client for the Metaculus API
 *
 * The version of the OpenAPI document: 1.0
 * Contact: Benjamin Manns <opensource@benmanns.com>
 * Generated by: https://openapi-generator.tech
 */

#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct PatchedOrganization {
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "subtitle", skip_serializing_if = "Option::is_none")]
    pub subtitle: Option<String>,
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub r#type: Option<String>,
    #[serde(rename = "user_project_perms", skip_serializing_if = "Option::is_none")]
    pub user_project_perms: Option<i32>,
    #[serde(rename = "absolute_url", skip_serializing_if = "Option::is_none")]
    pub absolute_url: Option<String>,
}

impl Default for PatchedOrganization {
    fn default() -> Self {
        Self::new()
    }
}

impl PatchedOrganization {
    #[must_use]
    pub fn new() -> PatchedOrganization {
        PatchedOrganization {
            id: None,
            name: None,
            subtitle: None,
            description: None,
            r#type: None,
            user_project_perms: None,
            absolute_url: None,
        }
    }
}
