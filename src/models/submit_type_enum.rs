/*
 * Metaculus API
 *
 * Welcome to the unofficial Rust client for the Metaculus API
 *
 * The version of the OpenAPI document: 1.0
 * Contact: Benjamin Manns <opensource@benmanns.com>
 * Generated by: https://openapi-generator.tech
 */

///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum SubmitTypeEnum {
    #[serde(rename = "S")]
    S,
    #[serde(rename = "P")]
    P,
    #[serde(rename = "U")]
    U,
    #[serde(rename = "D")]
    D,
    #[serde(rename = "I")]
    I,
    #[serde(rename = "R")]
    R,
    #[serde(rename = "A")]
    A,
    #[serde(rename = "E")]
    E,
    #[serde(rename = "B")]
    B,
    #[serde(rename = "C")]
    C,
    #[serde(rename = "F")]
    F,
    #[serde(rename = "Q")]
    Q,
    #[serde(rename = "Z")]
    Z,
    #[serde(rename = "M")]
    M,
    #[serde(rename = "N")]
    N,
}

impl ToString for SubmitTypeEnum {
    fn to_string(&self) -> String {
        match self {
            Self::S => String::from("S"),
            Self::P => String::from("P"),
            Self::U => String::from("U"),
            Self::D => String::from("D"),
            Self::I => String::from("I"),
            Self::R => String::from("R"),
            Self::A => String::from("A"),
            Self::E => String::from("E"),
            Self::B => String::from("B"),
            Self::C => String::from("C"),
            Self::F => String::from("F"),
            Self::Q => String::from("Q"),
            Self::Z => String::from("Z"),
            Self::M => String::from("M"),
            Self::N => String::from("N"),
        }
    }
}

impl Default for SubmitTypeEnum {
    fn default() -> SubmitTypeEnum {
        Self::S
    }
}
