/*
 * Metaculus API
 *
 * Welcome to the unofficial Rust client for the Metaculus API
 *
 * The version of the OpenAPI document: 1.0
 * Contact: Benjamin Manns <opensource@benmanns.com>
 * Generated by: https://openapi-generator.tech
 */

#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct SubQuestionUpdate {
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    #[serde(rename = "title", skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,
    #[serde(rename = "title_short")]
    pub title_short: String,
    #[serde(rename = "publish_time", skip_serializing_if = "Option::is_none")]
    pub publish_time: Option<String>,
    #[serde(rename = "close_time", skip_serializing_if = "Option::is_none")]
    pub close_time: Option<String>,
    #[serde(rename = "resolve_time", skip_serializing_if = "Option::is_none")]
    pub resolve_time: Option<String>,
    #[serde(rename = "possibilities")]
    pub possibilities: ::std::collections::HashMap<String, serde_json::Value>,
    #[serde(rename = "sub_question_label", skip_serializing_if = "Option::is_none")]
    pub sub_question_label: Option<String>,
    #[serde(rename = "resolution", deserialize_with = "Option::deserialize")]
    pub resolution: Option<f64>,
    #[serde(rename = "prediction_count")]
    pub prediction_count: i32,
    #[serde(rename = "conditioned_on_resolution")]
    pub conditioned_on_resolution: f64,
    #[serde(rename = "cp_reveal_time", skip_serializing_if = "Option::is_none")]
    pub cp_reveal_time: Option<String>,
}

impl SubQuestionUpdate {
    #[must_use]
    pub fn new(
        title_short: String,
        possibilities: ::std::collections::HashMap<String, serde_json::Value>,
        resolution: Option<f64>,
        prediction_count: i32,
        conditioned_on_resolution: f64,
    ) -> SubQuestionUpdate {
        SubQuestionUpdate {
            id: None,
            title: None,
            title_short,
            publish_time: None,
            close_time: None,
            resolve_time: None,
            possibilities,
            sub_question_label: None,
            resolution,
            prediction_count,
            conditioned_on_resolution,
            cp_reveal_time: None,
        }
    }
}
